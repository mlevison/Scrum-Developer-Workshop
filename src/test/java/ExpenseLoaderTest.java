import org.apache.commons.csv.CSVRecord;
import org.example.ExpenseLoader;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class ExpenseLoaderTest {
    private final String expenseFilePath = "src/test/resources/ExpensifyExpenseExportSample.csv";
    private final String[] storeList = {
            "OneRestaurant",
            "FoodOut",
            "AGrocery",
            "Coffee1",
            "BGrocer",
            "HouseholdGoods",
            "HouseholdGoods",
            "AnotherGrocer",
            "BGrocer",
            "BHousehold",
            "Racquet Centre",
            "Gas",
            "BGrocer",
            "Games",
            "BHousehold",
            "Racquet Centre",
            "BGrocer",
            "Car",
            "AnotherGrocer",
            "Beer",
            "Long Term Parking",
            "BGrocer",
            "AnotherGrocer",
            "AnotherGrocer",
            "AGrocery",
            "Gas",
            "Banking.",
            "FoodStore",
            "AnotherGrocer",
            "ClothingStore",
            "ClothingStore",
            "AnotherClothingStore",
            "Parking",
            "HouseholdGoods",
            "AnotherGrocer",
            "Health",
            "Gas",
            "AnotherStore",
            "AGrocery",
            "BHousehold",
            "CommonGrounds",
            "Grocery Checkout",
            "FoodOut R",
            "FoodOut",
            "FoodOut",
            "Coffee",
            "Coffee",
            "Gas",
            "AnotherGrocer",
            "BGrocer",
            "BGrocer",
            "Health",
            "BGrocer Pharmacy",
            "Haircut",
            "Coffee",
            "Haircut",
            "AGrocery",
            "HouseholdGoods",
            "Shoppers Drug Mart",
            "Car",
            "AnotherGrocer",
            "AnotherGrocer",
            "Garden Store",
            "AnotherGrocer",
            "BHousehold",
            "Health",
            "BHousehold",
            "HouseholdGoods",
            "Staples",
            "AnotherGrocer",
            "AnotherStore",
            "AnotherStore",
            "Parking",
            "Cafe",
            "Airline",
            "Airline",
            "ClothingStore",
            "AnotherGrocer",
            "AnotherGrocer"
    };

    private final LocalDate[] dateList = {
            LocalDate.of(2024, 7, 3),
            LocalDate.of(2024, 7, 5),
            LocalDate.of(2024, 6, 1),
            LocalDate.of(2024, 6, 2),
            LocalDate.of(2024, 6, 2),
            LocalDate.of(2024, 6, 3),
            LocalDate.of(2024, 6, 3),
            LocalDate.of(2024, 6, 3),
            LocalDate.of(2024, 6, 3),
            LocalDate.of(2024, 6, 4),
            LocalDate.of(2024, 6, 6),
            LocalDate.of(2024, 6, 6),
            LocalDate.of(2024, 6, 7),
            LocalDate.of(2024, 6, 7),
            LocalDate.of(2024, 6, 7),
            LocalDate.of(2024, 6, 8),
            LocalDate.of(2024, 6, 8),
            LocalDate.of(2024, 6, 10),
            LocalDate.of(2024, 6, 11),
            LocalDate.of(2024, 6, 12),
            LocalDate.of(2024, 6, 13),
            LocalDate.of(2024, 6, 13),
            LocalDate.of(2024, 6, 13),
            LocalDate.of(2024, 6, 14),
            LocalDate.of(2024, 6, 14),
            LocalDate.of(2024, 6, 14),
            LocalDate.of(2024, 6, 15),
            LocalDate.of(2024, 6, 15),
            LocalDate.of(2024, 6, 15),
            LocalDate.of(2024, 6, 15),
            LocalDate.of(2024, 6, 15),
            LocalDate.of(2024, 6, 17),
            LocalDate.of(2024, 6, 17),
            LocalDate.of(2024, 6, 17),
            LocalDate.of(2024, 6, 18),
            LocalDate.of(2024, 6, 18),
            LocalDate.of(2024, 6, 18),
            LocalDate.of(2024, 6, 19),
            LocalDate.of(2024, 6, 20),
            LocalDate.of(2024, 6, 20),
            LocalDate.of(2024, 6, 21),
            LocalDate.of(2024, 6, 21),
            LocalDate.of(2024, 6, 21),
            LocalDate.of(2024, 6, 21),
            LocalDate.of(2024, 6, 22),
            LocalDate.of(2024, 6, 23),
            LocalDate.of(2024, 6, 23),
            LocalDate.of(2024, 6, 23),
            LocalDate.of(2024, 6, 23),
            LocalDate.of(2024, 6, 23),
            LocalDate.of(2024, 6, 24),
            LocalDate.of(2024, 6, 24),
            LocalDate.of(2024, 6, 24),
            LocalDate.of(2024, 6, 24),
            LocalDate.of(2024, 6, 24),
            LocalDate.of(2024, 6, 25),
            LocalDate.of(2024, 6, 25),
            LocalDate.of(2024, 6, 25),
            LocalDate.of(2024, 6, 26),
            LocalDate.of(2024, 6, 26),
            LocalDate.of(2024, 6, 27),
            LocalDate.of(2024, 6, 27),
            LocalDate.of(2024, 6, 27),
            LocalDate.of(2024, 6, 27),
            LocalDate.of(2024, 6, 27),
            LocalDate.of(2024, 6, 28),
            LocalDate.of(2024, 6, 28),
            LocalDate.of(2024, 6, 29),
            LocalDate.of(2024, 6, 29),
            LocalDate.of(2024, 6, 29),
            LocalDate.of(2024, 6, 29),
            LocalDate.of(2024, 6, 29),
            LocalDate.of(2024, 6, 30),
            LocalDate.of(2024, 6, 30),
            LocalDate.of(2024, 7, 1),
            LocalDate.of(2024, 7, 1),
            LocalDate.of(2024, 7, 2),
            LocalDate.of(2024, 7, 2),
            LocalDate.of(2024, 7, 2)
    };

    private final BigDecimal[] amountList = {
            new BigDecimal("6780").movePointLeft(2),
            new BigDecimal("6320").movePointLeft(2),
            new BigDecimal("12708").movePointLeft(2),
            new BigDecimal("1158").movePointLeft(2),
            new BigDecimal("350").movePointLeft(2),
            new BigDecimal("4957").movePointLeft(2),
            new BigDecimal("4957").movePointLeft(2),
            new BigDecimal("2047").movePointLeft(2),
            new BigDecimal("2701").movePointLeft(2),
            new BigDecimal("11229").movePointLeft(2),
            new BigDecimal("2260").movePointLeft(2),
            new BigDecimal("3171").movePointLeft(2),
            new BigDecimal("1547").movePointLeft(2),
            new BigDecimal("300").movePointLeft(2),
            new BigDecimal("13799").movePointLeft(2),
            new BigDecimal("1356").movePointLeft(2),
            new BigDecimal("677").movePointLeft(2),
            new BigDecimal("8919").movePointLeft(2),
            new BigDecimal("5129").movePointLeft(2),
            new BigDecimal("2267").movePointLeft(2),
            new BigDecimal("8000").movePointLeft(2),
            new BigDecimal("349").movePointLeft(2),
            new BigDecimal("497").movePointLeft(2),
            new BigDecimal("1900").movePointLeft(2),
            new BigDecimal("2343").movePointLeft(2),
            new BigDecimal("5351").movePointLeft(2),
            new BigDecimal("686").movePointLeft(2),
            new BigDecimal("18166").movePointLeft(2),
            new BigDecimal("1342").movePointLeft(2),
            new BigDecimal("1825").movePointLeft(2),
            new BigDecimal("8975").movePointLeft(2),
            new BigDecimal("-1920").movePointLeft(2),
            new BigDecimal("850").movePointLeft(2),
            new BigDecimal("2069").movePointLeft(2),
            new BigDecimal("6183").movePointLeft(2),
            new BigDecimal("8500").movePointLeft(2),
            new BigDecimal("5553").movePointLeft(2),
            new BigDecimal("2033").movePointLeft(2),
            new BigDecimal("2417").movePointLeft(2),
            new BigDecimal("11482").movePointLeft(2),
            new BigDecimal("1095").movePointLeft(2),
            new BigDecimal("524").movePointLeft(2),
            new BigDecimal("850").movePointLeft(2),
            new BigDecimal("850").movePointLeft(2),
            new BigDecimal("3572").movePointLeft(2),
            new BigDecimal("712").movePointLeft(2),
            new BigDecimal("735").movePointLeft(2),
            new BigDecimal("3818").movePointLeft(2),
            new BigDecimal("199").movePointLeft(2),
            new BigDecimal("380").movePointLeft(2),
            new BigDecimal("569").movePointLeft(2),
            new BigDecimal("7016").movePointLeft(2),
            new BigDecimal("1629").movePointLeft(2),
            new BigDecimal("8500").movePointLeft(2),
            new BigDecimal("672").movePointLeft(2),
            new BigDecimal("3200").movePointLeft(2),
            new BigDecimal("26829").movePointLeft(2),
            new BigDecimal("22600").movePointLeft(2),
            new BigDecimal("5645").movePointLeft(2),
            new BigDecimal("18074").movePointLeft(2),
            new BigDecimal("5284").movePointLeft(2),
            new BigDecimal("3551").movePointLeft(2),
            new BigDecimal("4903").movePointLeft(2),
            new BigDecimal("2257").movePointLeft(2),
            new BigDecimal("36637").movePointLeft(2),
            new BigDecimal("8500").movePointLeft(2),
            new BigDecimal("4292").movePointLeft(2),
            new BigDecimal("4155").movePointLeft(2),
            new BigDecimal("63").movePointLeft(2),
            new BigDecimal("4676").movePointLeft(2),
            new BigDecimal("3942").movePointLeft(2),
            new BigDecimal("1270").movePointLeft(2),
            new BigDecimal("500").movePointLeft(2),
            new BigDecimal("3638").movePointLeft(2),
            new BigDecimal("12941").movePointLeft(2),
            new BigDecimal("11963").movePointLeft(2),
            new BigDecimal("40000").movePointLeft(2),
            new BigDecimal("5339").movePointLeft(2),
            new BigDecimal("676").movePointLeft(2)
    };

    String[] categories = {
            "Travel - Food",
            "Travel - Food",
            "Groceries",
            "Coffee and Tea",
            "Groceries",
            "Household goods",
            "Household goods",
            "Groceries",
            "Groceries",
            "Groceries",
            "Sports and Fitness",
            "Gas",
            "Groceries",
            "Sports and Fitness",
            "Groceries",
            "Sports and Fitness",
            "Groceries",
            "Car - Repairs & Maintenance",
            "Groceries",
            "Meals and Drinks Out",
            "Car - Other Expenses",
            "Groceries",
            "Groceries",
            "Groceries",
            "Groceries",
            "Gas",
            "Banking Fees and Apps",
            "Groceries",
            "Groceries",
            "Clothes",
            "Clothes",
            "Clothes",
            "Parking",
            "Household goods",
            "Groceries",
            "Health",
            "Gas",
            "Personal Care",
            "Groceries",
            "Groceries",
            "Meals - Business",
            "Groceries",
            "Meals - Business",
            "Meals - Business",
            "Meals - Business",
            "Meals - Business",
            "Meals - Business",
            "Travel - Transportation",
            "Groceries",
            "Groceries",
            "Groceries",
            "Health",
            "Health",
            "Personal Care",
            "Travel - Food",
            "Personal Care",
            "Groceries",
            "Garden & Outdoor items",
            "Groceries",
            "Car - Other Expenses",
            "Groceries",
            "Groceries",
            "Garden & Outdoor items",
            "Groceries",
            "Groceries",
            "Health",
            "Groceries",
            "Household goods",
            "School fees",
            "Groceries",
            "Personal Care",
            "Personal Care",
            "Parking",
            "Meals and Drinks Out",
            "Travel - Airfare",
            "Travel - Airfare",
            "Clothes",
            "Groceries",
            "Groceries"
    };

    @Test
    void sampleExpensesLoad() {
        ExpenseLoader expenseLoader = new ExpenseLoader(expenseFilePath);
        var rows = expenseLoader.getRows();
        assertEquals(categories.length, rows.size());

        for (CSVRecord row : rows) {
            int rowNumber = (int) row.getRecordNumber() - 1;
            String store = row.get("Merchant");
            assertThat(store).withFailMessage("Actual Store: " + store + " Expected: " + storeList[rowNumber] + " at row: " + rowNumber).isEqualTo(storeList[rowNumber]);
            //assertEquals(storeList[(int) row.getRecordNumber() - 1], store);

            String date = row.get(0);
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDate transactionDate = LocalDate.parse(date, dateTimeFormatter);

            assertThat(transactionDate).withFailMessage("Actual Date: " + transactionDate + " Expected: " + dateList[rowNumber] + " at row: " + rowNumber).isEqualTo(dateList[rowNumber]);
//            String amount = row.get("Amount");
//            BigDecimal transactionAmount = new BigDecimal(amount).setScale(2);
//
//            assertThat(transactionAmount).withFailMessage("Actual Amount: " + transactionAmount + " Expected: " + amountList[rowNumber] + " at row: " + rowNumber).isEqualTo(amountList[rowNumber]);
        }
    }
}
